#include <iostream>
using namespace std;

float cofactor(float A[][3], int a1 ,int a2, int b1, int b2) {
	return A[a1][b1] * A[a2][b2] - A[a1][b2] * A[a2][b1];
}

int main() {
	int a = 2, b = 2, c = 3, d = 3, count=0;
	float A_2[2][2] = { {1, 2}, {3, 4} }, ** B_2, A_3[3][3] = { {1, -1, -1}, {-1, 2, 3}, {1, 1, 4} }, ** B_3;

	//inverse matrix
	B_2 = new float* [a];
	B_3 = new float* [c];
	for (int n = 0; n < a; n++) B_2[n] = new float[b];
	for (int m = 0; m < c; m++) B_3[m] = new float[d];

	//Cofactor Matrix
	int a1, a2, b1, b2;
	for (int i = 0; i < c; i++) {
		if (i == 0) { a1 = 1; a2 = 2; }
		else if (i == 1) { a1 = 0; a2 = 2; }
		else { a1 = 0; a2 = 1; }
		for (int j = 0; j < d; j++) {
			if (j == 0) { b1 = 1; b2 = 2; }
			else if (j == 1) { b1 = 0; b2 = 2; }
			else { b1 = 0; b2 = 1; }
			B_3[j][i] = cofactor(A_3, a1, a2, b1, b2);
		}
	}

	//determinant
	float det_A2 = A_2[0][0] * A_2[1][1] - A_2[0][1] * A_2[1][0];
	float det_A3 = A_3[0][0] * B_3[0][0] - A_3[0][1] * B_3[0][1] + A_3[0][2] * B_3[0][2];

	//2x2 inverse matrix
	if (det_A2 != 0) {
		float A[4] = { A_2[1][1], A_2[0][1], A_2[1][0], A_2[0][0] };
		for (int i = 0; i < a; i++) {
			for (int j = 0; j < b; j++) {
				B_2[i][j] = pow(-1, i + j) * A[count] / det_A2;
				count++;
			}
		}
	}
	else return 0;

	//3x3 inverse matrix
	if (det_A3 != 0) {
		for (int i = 0; i < c; i++) {
			for (int j = 0; j < d; j++) {
				B_3[i][j] /= det_A3;
				B_3[i][j] *= pow(-1, i + j);
			}
		}
	}
	else return 0;

	// show results
	for (int i = 0; i < a; i++) {
		for (int j = 0; j < b; j++) { cout << B_2[i][j] << " "; }
		cout << endl;
	}
	for (int i = 0; i < c; i++) {
		for (int j = 0; j < d; j++) { cout << B_3[i][j] << " "; }
		cout << endl;
	}
	for (int i = 0; i < a; i++) { delete[] B_2[i]; }
	for (int i = 0; i < c; i++) { delete[] B_3[i]; }
	delete[] B_2;
	delete[] B_3;

	return 1;
}
