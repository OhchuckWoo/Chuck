#include <iostream>
using namespace std;

int main() {
	int a = 2, b = 2, c = 3, d = 3;
	float A_2[2][2] = { {3, 1}, {2, 1} }, ** B_2, A_3[3][3] = { {1, 2, 3}, {0, 1, 4}, {5, 6, 0} }, ** B_3;

	//inverse matrix
	B_2 = new float* [a];
	B_3 = new float* [c];
	for (int n = 0; n < a; n++) B_2[n] = new float[b];
	for (int m = 0; m < c; m++) B_3[m] = new float[d];

	float det_A2 = A_2[0][0] * A_2[1][1] - A_2[0][1] * A_2[1][0];
	float det_A3 = A_3[0][0] * (A_3[1][1] * A_3[2][2] - A_3[1][2] * A_3[2][1]) + A_3[0][1] * (A_3[1][0] * A_3[2][2] - A_3[1][2] * A_3[2][0]) + A_3[0][2] * (A_3[1][0] * A_3[2][1] - A_3[1][1] * A_3[2][0]);

	//Cofactor Matrix
	float C1 = A_3[1][1] * A_3[2][2] - A_3[1][2] * A_3[2][1];
	float C2 = A_3[1][0] * A_3[2][2] - A_3[1][2] * A_3[2][0];
	float C3 = A_3[1][0] * A_3[2][1] - A_3[1][1] * A_3[2][0];
	float C4 = A_3[0][1] * A_3[2][2] - A_3[0][2] * A_3[2][1];
	float C5 = A_3[0][0] * A_3[2][2] - A_3[0][2] * A_3[2][0];
	float C6 = A_3[0][0] * A_3[2][1] - A_3[0][1] * A_3[2][0];
	float C7 = A_3[0][1] * A_3[1][2] - A_3[0][2] * A_3[1][1];
	float C8 = A_3[0][0] * A_3[1][2] - A_3[0][2] * A_3[1][0];
	float C9 = A_3[0][0] * A_3[1][1] - A_3[0][1] * A_3[1][0];

	//2x2 inverse matrix
	if (det_A2 != 0) {
	B_2[0][0] = A_2[1][1]/det_A2; B_2[0][1] = -A_2[1][0]/det_A2; 
	B_2[1][0] = -A_2[0][1]/det_A2; B_2[1][1] = A_2[0][0]/det_A2;
	}
	else return 0;

	//3x3 inverse matrix
	if (det_A3 != 0) {
	B_3[0][0] = C1 / det_A3; B_3[0][1] = C2 / det_A3; B_3[0][2] = C3 / det_A3; 
	B_3[1][0] = C4 / det_A3; B_3[1][1] = C5 / det_A3; B_3[1][2] = C6 / det_A3;
	B_3[2][0] = C7 / det_A3; B_3[2][1] = C8 / det_A3; B_3[2][2] = C9 / det_A3;
	}
	else return 0;

	// show results
	for (int i = 0; i < a; i++) {
		for (int j = 0; j < b; j++) { cout << B_2[i][j] << " "; }
		cout << endl;
	}
	for (int i = 0; i < c; i++) {
		for (int j = 0; j < d; j++) { cout << B_3[i][j] << " "; }
		cout << endl;
	}
	for (int i = 0; i < a; i++) { delete[] B_2[i]; }
	for (int i = 0; i < c; i++) { delete[] B_3[i]; }
	delete[] B_2;
	delete[] B_3;
}
